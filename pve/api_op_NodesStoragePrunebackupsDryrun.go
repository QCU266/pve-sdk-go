// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesStoragePrunebackupsDryrunRequest struct {
	Node         string  `query:"node,omitempty"`          // The cluster node name.
	PruneBackups *string `query:"prune-backups,omitempty"` // Use these retention options instead of those from the storage configuration.
	Storage      string  `query:"storage,omitempty"`       // The storage identifier.
	Type         *string `query:"type,omitempty"`          // Either 'qemu' or 'lxc'. Only consider backups for guests of this type.
	Vmid         *int64  `query:"vmid,omitempty"`          // Only consider backups for this guest.
}

type NodesStoragePrunebackupsDryrunResponse []NodesStoragePrunebackupsDryrunResponseItem

type NodesStoragePrunebackupsDryrunResponseItem struct {
	Ctime int64  `json:"ctime,omitempty"` // Creation time of the backup (seconds since the UNIX epoch).
	Mark  string `json:"mark,omitempty"`  // Whether the backup would be kept or removed. Backups that are protected or don't use the standard naming scheme are not removed.
	Type  string `json:"type,omitempty"`  // One of 'qemu', 'lxc', 'openvz' or 'unknown'.
	Vmid  *int64 `json:"vmid,omitempty"`  // The VM the backup belongs to.
	Volid string `json:"volid,omitempty"` // Backup volume ID.
}

// Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/storage/{storage}/prunebackups
func (c *Client) NodesStoragePrunebackupsDryrun(ctx context.Context, request *NodesStoragePrunebackupsDryrunRequest) (*NodesStoragePrunebackupsDryrunResponse, error) {

	method := "GET"
	path := "/nodes/{node}/storage/{storage}/prunebackups"

	var response NodesStoragePrunebackupsDryrunResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

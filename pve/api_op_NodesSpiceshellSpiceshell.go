// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesSpiceshellSpiceshellRequest struct {
	Cmd     *string `json:"cmd,omitempty"`      // Run specific command or default to login.
	CmdOpts *string `json:"cmd-opts,omitempty"` // Add parameters to a command. Encoded as null terminated strings.
	Node    string  `json:"node,omitempty"`     // The cluster node name.
	Proxy   *string `json:"proxy,omitempty"`    // SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).
}

// Returned values can be directly passed to the 'remote-viewer' application.
type NodesSpiceshellSpiceshellResponse struct {
	Host     string `json:"host,omitempty"`     //
	Password string `json:"password,omitempty"` //
	Proxy    string `json:"proxy,omitempty"`    //
	TlsPort  int64  `json:"tls-port,omitempty"` //
	Type     string `json:"type,omitempty"`     //
}

// Creates a SPICE shell.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/spiceshell
func (c *Client) NodesSpiceshellSpiceshell(ctx context.Context, request *NodesSpiceshellSpiceshellRequest) (*NodesSpiceshellSpiceshellResponse, error) {

	method := "POST"
	path := "/nodes/{node}/spiceshell"

	var response NodesSpiceshellSpiceshellResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

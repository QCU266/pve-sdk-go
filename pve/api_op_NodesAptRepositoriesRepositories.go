// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesAptRepositoriesRepositoriesRequest struct {
	Node string `query:"node,omitempty"` // The cluster node name.
}

// Result from parsing the APT repository files in /etc/apt/.
type NodesAptRepositoriesRepositoriesResponse struct {
	Digest        string                                                      `json:"digest,omitempty"`         // Common digest of all files.
	Errors        []NodesAptRepositoriesRepositoriesResponseErrorsItem        `json:"errors,omitempty"`         // List of problematic repository files.
	Files         []NodesAptRepositoriesRepositoriesResponseFilesItem         `json:"files,omitempty"`          // List of parsed repository files.
	Infos         []NodesAptRepositoriesRepositoriesResponseInfosItem         `json:"infos,omitempty"`          // Additional information/warnings for APT repositories.
	StandardRepos []NodesAptRepositoriesRepositoriesResponseStandardReposItem `json:"standard-repos,omitempty"` // List of standard repositories and their configuration status
}

type NodesAptRepositoriesRepositoriesResponseErrorsItem struct {
	Error string `json:"error,omitempty"` // The error message
	Path  string `json:"path,omitempty"`  // Path to the problematic file.
}

type NodesAptRepositoriesRepositoriesResponseFilesItem struct {
	Digest       []NodesAptRepositoriesRepositoriesResponseFilesItemDigestItem       `json:"digest,omitempty"`       // Digest of the file as bytes.
	FileType     string                                                              `json:"file-type,omitempty"`    // Format of the file.
	Path         string                                                              `json:"path,omitempty"`         // Path to the problematic file.
	Repositories []NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItem `json:"repositories,omitempty"` // The parsed repositories.
}

type NodesAptRepositoriesRepositoriesResponseFilesItemDigestItem int64

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItem struct {
	Comment    *string                                                                            `json:"Comment,omitempty"`    // Associated comment
	Components *[]NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemComponentsItem `json:"Components,omitempty"` // List of repository components
	Enabled    bool                                                                               `json:"Enabled,omitempty"`    // Whether the repository is enabled or not
	FileType   string                                                                             `json:"FileType,omitempty"`   // Format of the defining file.
	Options    *[]NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemOptionsItem    `json:"Options,omitempty"`    // Additional options
	Suites     []NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemSuitesItem      `json:"Suites,omitempty"`     // List of package distribuitions
	Types      []NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemTypesItem       `json:"Types,omitempty"`      // List of package types.
	URIs       []NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemURIsItem        `json:"URIs,omitempty"`       // List of repository URIs.
}

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemComponentsItem string

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemOptionsItem struct {
	Key    string                                                                                   `json:"Key,omitempty"`    //
	Values []NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemOptionsItemValuesItem `json:"Values,omitempty"` //
}

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemOptionsItemValuesItem string

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemSuitesItem string

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemTypesItem string

type NodesAptRepositoriesRepositoriesResponseFilesItemRepositoriesItemURIsItem string

type NodesAptRepositoriesRepositoriesResponseInfosItem struct {
	Index    string  `json:"index,omitempty"`    // Index of the associated repository within the file.
	Kind     string  `json:"kind,omitempty"`     // Kind of the information (e.g. warning).
	Message  string  `json:"message,omitempty"`  // Information message.
	Path     string  `json:"path,omitempty"`     // Path to the associated file.
	Property *string `json:"property,omitempty"` // Property from which the info originates.
}

type NodesAptRepositoriesRepositoriesResponseStandardReposItem struct {
	Handle string `json:"handle,omitempty"` // Handle to identify the repository.
	Name   string `json:"name,omitempty"`   // Full name of the repository.
	Status *bool  `json:"status,omitempty"` // Indicating enabled/disabled status, if the repository is configured.
}

// Get APT repository information.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/apt/repositories
func (c *Client) NodesAptRepositoriesRepositories(ctx context.Context, request *NodesAptRepositoriesRepositoriesRequest) (*NodesAptRepositoriesRepositoriesResponse, error) {

	method := "GET"
	path := "/nodes/{node}/apt/repositories"

	var response NodesAptRepositoriesRepositoriesResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

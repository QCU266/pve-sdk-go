// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesQemuStatusStartVmStartRequest struct {
	ForceCpu         *string `json:"force-cpu,omitempty"`         // Override QEMU's -cpu argument with the given string.
	Machine          *string `json:"machine,omitempty"`           // Specifies the Qemu machine type.
	Migratedfrom     *string `json:"migratedfrom,omitempty"`      // The cluster node name.
	MigrationNetwork *string `json:"migration_network,omitempty"` // CIDR of the (sub) network that is used for migration.
	MigrationType    *string `json:"migration_type,omitempty"`    // Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance.
	Node             string  `json:"node,omitempty"`              // The cluster node name.
	Skiplock         *bool   `json:"skiplock,omitempty"`          // Ignore locks - only root is allowed to use this option.
	Stateuri         *string `json:"stateuri,omitempty"`          // Some command save/restore state from this location.
	Targetstorage    *string `json:"targetstorage,omitempty"`     // Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.
	Timeout          *int64  `json:"timeout,omitempty"`           // Wait maximal timeout seconds.
	Vmid             int64   `json:"vmid,omitempty"`              // The (unique) ID of the VM.
}

type NodesQemuStatusStartVmStartResponse string

// Start virtual machine.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/qemu/{vmid}/status/start
func (c *Client) NodesQemuStatusStartVmStart(ctx context.Context, request *NodesQemuStatusStartVmStartRequest) (*NodesQemuStatusStartVmStartResponse, error) {

	method := "POST"
	path := "/nodes/{node}/qemu/{vmid}/status/start"

	var response NodesQemuStatusStartVmStartResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type ClusterBackupIncludedVolumesGetVolumeBackupIncludedRequest struct {
	Id string `query:"id,omitempty"` // The job ID.
}

type ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponseChildrenItemChildrenItem struct {
	Id       string `json:"id,omitempty"`       // Configuration key of the volume.
	Included bool   `json:"included,omitempty"` // Whether the volume is included in the backup or not.
	Name     string `json:"name,omitempty"`     // Name of the volume.
	Reason   string `json:"reason,omitempty"`   // The reason why the volume is included (or excluded).
}

type ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponseChildrenItem struct {
	Children *[]ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponseChildrenItemChildrenItem `json:"children,omitempty"` // The volumes of the guest with the information if they will be included in backups.
	Id       int64                                                                                  `json:"id,omitempty"`       // VMID of the guest.
	Name     *string                                                                                `json:"name,omitempty"`     // Name of the guest
	Type     string                                                                                 `json:"type,omitempty"`     // Type of the guest, VM, CT or unknown for removed but not purged guests.
}

// Root node of the tree object. Children represent guests, grandchildren represent volumes of that guest.
type ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponse struct {
	Children []ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponseChildrenItem `json:"children,omitempty"` //
}

// Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.
// https://pve.proxmox.com/pve-docs/api-viewer/#/cluster/backup/{id}/included_volumes
func (c *Client) ClusterBackupIncludedVolumesGetVolumeBackupIncluded(ctx context.Context, request *ClusterBackupIncludedVolumesGetVolumeBackupIncludedRequest) (*ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponse, error) {

	method := "GET"
	path := "/cluster/backup/{id}/included_volumes"

	var response ClusterBackupIncludedVolumesGetVolumeBackupIncludedResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

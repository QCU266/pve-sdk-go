// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesQemuCloneCloneVmRequest struct {
	Bwlimit     *int64  `json:"bwlimit,omitempty"`     // Override I/O bandwidth limit (in KiB/s).
	Description *string `json:"description,omitempty"` // Description for the new VM.
	Format      *string `json:"format,omitempty"`      // Target format for file storage. Only valid for full clone.
	Full        *bool   `json:"full,omitempty"`        // Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default.
	Name        *string `json:"name,omitempty"`        // Set a name for the new VM.
	Newid       int64   `json:"newid,omitempty"`       // VMID for the clone.
	Node        string  `json:"node,omitempty"`        // The cluster node name.
	Pool        *string `json:"pool,omitempty"`        // Add the new VM to the specified pool.
	Snapname    *string `json:"snapname,omitempty"`    // The name of the snapshot.
	Storage     *string `json:"storage,omitempty"`     // Target storage for full clone.
	Target      *string `json:"target,omitempty"`      // Target node. Only allowed if the original VM is on shared storage.
	Vmid        int64   `json:"vmid,omitempty"`        // The (unique) ID of the VM.
}

type NodesQemuCloneCloneVmResponse string

// Create a copy of virtual machine/template.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/qemu/{vmid}/clone
func (c *Client) NodesQemuCloneCloneVm(ctx context.Context, request *NodesQemuCloneCloneVmRequest) (*NodesQemuCloneCloneVmResponse, error) {

	method := "POST"
	path := "/nodes/{node}/qemu/{vmid}/clone"

	var response NodesQemuCloneCloneVmResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

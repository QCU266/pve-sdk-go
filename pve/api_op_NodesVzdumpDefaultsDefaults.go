// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesVzdumpDefaultsDefaultsRequest struct {
	Node    string  `query:"node,omitempty"`    // The cluster node name.
	Storage *string `query:"storage,omitempty"` // The storage identifier.
}

type NodesVzdumpDefaultsDefaultsResponse struct {
	All              *bool   `json:"all,omitempty"`              // Backup all known guest systems on this host.
	Bwlimit          *int64  `json:"bwlimit,omitempty"`          // Limit I/O bandwidth (KBytes per second).
	Compress         *string `json:"compress,omitempty"`         // Compress dump file.
	Dumpdir          *string `json:"dumpdir,omitempty"`          // Store resulting files to specified directory.
	Exclude          *string `json:"exclude,omitempty"`          // Exclude specified guest systems (assumes --all)
	ExcludePath      *string `json:"exclude-path,omitempty"`     // Exclude certain files/directories (shell globs). Paths starting with '/' are anchored to the container's root,  other paths match relative to each subdirectory.
	Ionice           *int64  `json:"ionice,omitempty"`           // Set CFQ ionice priority.
	Lockwait         *int64  `json:"lockwait,omitempty"`         // Maximal time to wait for the global lock (minutes).
	Mailnotification *string `json:"mailnotification,omitempty"` // Specify when to send an email
	Mailto           *string `json:"mailto,omitempty"`           // Comma-separated list of email addresses or users that should receive email notifications.
	Maxfiles         *int64  `json:"maxfiles,omitempty"`         // Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system.
	Mode             *string `json:"mode,omitempty"`             // Backup mode.
	Node             *string `json:"node,omitempty"`             // Only run if executed on this node.
	NotesTemplate    *string `json:"notes-template,omitempty"`   // Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\n' and '\\' respectively.
	Performance      *string `json:"performance,omitempty"`      // Other performance-related settings.
	Pigz             *int64  `json:"pigz,omitempty"`             // Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count.
	Pool             *string `json:"pool,omitempty"`             // Backup all known guest systems included in the specified pool.
	Protected        *bool   `json:"protected,omitempty"`        // If true, mark backup(s) as protected.
	PruneBackups     *string `json:"prune-backups,omitempty"`    // Use these retention options instead of those from the storage configuration.
	Quiet            *bool   `json:"quiet,omitempty"`            // Be quiet.
	Remove           *bool   `json:"remove,omitempty"`           // Prune older backups according to 'prune-backups'.
	Script           *string `json:"script,omitempty"`           // Use specified hook script.
	Stdexcludes      *bool   `json:"stdexcludes,omitempty"`      // Exclude temporary files and logs.
	Stop             *bool   `json:"stop,omitempty"`             // Stop running backup jobs on this host.
	Stopwait         *int64  `json:"stopwait,omitempty"`         // Maximal time to wait until a guest system is stopped (minutes).
	Storage          *string `json:"storage,omitempty"`          // Store resulting file to this storage.
	Tmpdir           *string `json:"tmpdir,omitempty"`           // Store temporary files to specified directory.
	Vmid             *string `json:"vmid,omitempty"`             // The ID of the guest system you want to backup.
	Zstd             *int64  `json:"zstd,omitempty"`             // Zstd threads. N=0 uses half of the available cores, N>0 uses N as thread count.
}

// Get the currently configured vzdump defaults.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/vzdump/defaults
func (c *Client) NodesVzdumpDefaultsDefaults(ctx context.Context, request *NodesVzdumpDefaultsDefaultsRequest) (*NodesVzdumpDefaultsDefaultsResponse, error) {

	method := "GET"
	path := "/nodes/{node}/vzdump/defaults"

	var response NodesVzdumpDefaultsDefaultsResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

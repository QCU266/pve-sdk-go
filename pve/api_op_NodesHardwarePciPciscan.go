// Code generated by gen-api. DO NOT EDIT.

package pve

import (
	"context"
)

type NodesHardwarePciPciscanRequest struct {
	Node              string  `query:"node,omitempty"`                // The cluster node name.
	PciClassBlacklist *string `query:"pci-class-blacklist,omitempty"` // A list of blacklisted PCI classes, which will not be returned. Following are filtered by default: Memory Controller (05), Bridge (06) and Processor (0b).
	Verbose           *bool   `query:"verbose,omitempty"`             // If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.
}

type NodesHardwarePciPciscanResponse []NodesHardwarePciPciscanResponseItem

type NodesHardwarePciPciscanResponseItem struct {
	Class               string  `json:"class,omitempty"`                 // The PCI Class of the device.
	Device              string  `json:"device,omitempty"`                // The Device ID.
	DeviceName          *string `json:"device_name,omitempty"`           //
	Id                  string  `json:"id,omitempty"`                    // The PCI ID.
	Iommugroup          int64   `json:"iommugroup,omitempty"`            // The IOMMU group in which the device is in. If no IOMMU group is detected, it is set to -1.
	Mdev                *bool   `json:"mdev,omitempty"`                  // If set, marks that the device is capable of creating mediated devices.
	SubsystemDevice     *string `json:"subsystem_device,omitempty"`      // The Subsystem Device ID.
	SubsystemDeviceName *string `json:"subsystem_device_name,omitempty"` //
	SubsystemVendor     *string `json:"subsystem_vendor,omitempty"`      // The Subsystem Vendor ID.
	SubsystemVendorName *string `json:"subsystem_vendor_name,omitempty"` //
	Vendor              string  `json:"vendor,omitempty"`                // The Vendor ID.
	VendorName          *string `json:"vendor_name,omitempty"`           //
}

// List local PCI devices.
// https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/hardware/pci
func (c *Client) NodesHardwarePciPciscan(ctx context.Context, request *NodesHardwarePciPciscanRequest) (*NodesHardwarePciPciscanResponse, error) {

	method := "GET"
	path := "/nodes/{node}/hardware/pci"

	var response NodesHardwarePciPciscanResponse

	err := c.apiCall(ctx, method, path, request, &response)
	if err != nil {
		return nil, err
	}

	return &response, nil
}
